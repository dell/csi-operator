apiVersion: storage.dell.com/v1
kind: CSIPowerMax
metadata:
  name: test-powermax
  namespace: test-powermax
spec:
  driver:
    # Config version for CSI PowerMax v2.6.0 driver
    configVersion: v2.6.0
    # replica: Define the number of PowerMax controller nodes
    # to deploy to the Kubernetes release
    # Allowed values: n, where n > 0
    # Default value: None
    replicas: 2
    dnsPolicy: ClusterFirstWithHostNet
    forceUpdate: false
    fsGroupPolicy: ReadWriteOnceWithFSType
    common:
      # Image for CSI PowerMax driver v2.6.0
      image: dellemc/csi-powermax:v2.6.0
      # imagePullPolicy: Policy to determine if the image should be pulled prior to starting the container.
      # Allowed values:
      #  Always: Always pull the image.
      #  IfNotPresent: Only pull the image if it does not already exist on the node.
      #  Never: Never pull the image.
      # Default value: None
      imagePullPolicy: IfNotPresent
      envs:
        # X_CSI_MANAGED_ARRAYS: Serial ID of the arrays that will be used for provisioning
        # Default value: None
        # Examples: "000000000001", "000000000002"
        - name: X_CSI_MANAGED_ARRAYS
          value: "000000000000,000000000001"
        # X_CSI_POWERMAX_ENDPOINT: Address of the Unisphere server that is managing the PowerMax arrays
        # Default value: None
        # Example: https://0.0.0.1:8443
        - name: X_CSI_POWERMAX_ENDPOINT
          value: "https://0.0.0.0:8443/"
        # X_CSI_K8S_CLUSTER_PREFIX: Define a prefix that is appended onto
        # all resources created in the Array
        # This should be unique per K8s/CSI deployment
        # maximum length of this value is 3 characters
        # Default value: None
        # Examples: "XYZ", "EMC"
        - name: X_CSI_K8S_CLUSTER_PREFIX
          value: "XYZ"
        # X_CSI_POWERMAX_PORTGROUPS: Define the set of existing port groups that the driver will use.
        # It is a comma separated list of portgroup names.
        # Required only in case of iSCSI port groups
        # Allowed values: iSCSI Port Group names
        # Default value: None
        # Examples: "pg1", "pg1, pg2"
        - name: "X_CSI_POWERMAX_PORTGROUPS"
          value: ""
        # "X_CSI_TRANSPORT_PROTOCOL" can be "FC" or "FIBRE" for fibrechannel,
        # "ISCSI" for iSCSI, or "" for autoselection.
        # Allowed values:
        #   "FC"    - Fiber Channel protocol
        #   "FIBER" - Fiber Channel protocol
        #   "ISCSI" - iSCSI protocol
        #   ""      - Automatic selection of transport protocol
        # Default value: "" <empty>
        - name: "X_CSI_TRANSPORT_PROTOCOL"
          value: ""
        # X_CSI_POWERMAX_PROXY_SERVICE_NAME: Refers to the name of the proxy service in kubernetes
        # Allowed values: "powermax-reverseproxy"
        # default values: "powermax-reverseproxy"
        - name: "X_CSI_POWERMAX_PROXY_SERVICE_NAME"
          value: "powermax-reverseproxy"
        # X_CSI_GRPC_MAX_THREADS: Defines the maximum number of concurrent grpc requests.
        # Set this value to a higher number (max 50) if you are using the proxy
        # Allowed values: n, where n > 4
        # default values: None
        - name: "X_CSI_GRPC_MAX_THREADS"
          value: "4"
        # VMware/vSphere virtualization support
        # set X_CSI_VSPHERE_ENABLED to true, if you to enable VMware virtualized environment support via RDM
        # Allowed values:
        #   "true" - vSphere volumes are enabled
        #   "false" - vSphere volumes are disabled
        # Default value: "false"
        - name: "X_CSI_VSPHERE_ENABLED"
          value: "false"
        # X_CSI_VSPHERE_PORTGROUP: An existing portGroup that driver will use for vSphere
        # recommended format: csi-x-VC-PG, x can be anything of user choice
        # Allowed value: valid existing port group on the array
        # Default value: "" <empty>
        - name: "X_CSI_VSPHERE_PORTGROUP"
          value: ""
        # X_CSI_VSPHERE_HOSTNAME: An existing host (initiator group) that driver will use for vSphere
        # this host should contain initiators from all the ESXs/ESXi host where the cluster is deployed
        # recommended format: csi-x-VC-HN, x can be anything of user choice
        # Allowed value: valid existing port group on the array
        # Default value: "" <empty>
        - name: "X_CSI_VSPHERE_HOSTNAME"
          value: ""
        # X_CSI_VCENTER_HOST: URL/endpoint of the vCenter where all the ESX are present
        # Allowed value: valid vCenter host endpoint
        # Default value: "" <empty>
        - name: "X_CSI_VCENTER_HOST"
          value: ""
    controller:
      # nodeSelector: Define node selection constraints for controller pods.
      # For the pod to be eligible to run on a node, the node must have each
      # of the indicated key-value pairs as labels.
      # Leave as blank to consider all nodes
      # Allowed values: map of key-value pairs
      # Default value: None
      nodeSelector:
      # Uncomment if nodes you wish to use have the node-role.kubernetes.io/control-plane taint
      #  node-role.kubernetes.io/control-plane: ""

      # tolerations: Define tolerations that would be applied to controller deployment
      # Leave as blank to install controller on worker nodes
      # Allowed values: map of key-value pairs
      # Default value: None
      tolerations:
      # Uncomment if nodes you wish to use have the node-role.kubernetes.io/control-plane taint
      #  - key: "node-role.kubernetes.io/control-plane"
      #    operator: "Exists"
      #    effect: "NoSchedule"
    node:
      envs:
        # X_CSI_POWERMAX_ISCSI_ENABLE_CHAP: Determine if the driver is going to configure
        # ISCSI node databases on the nodes with the CHAP credentials
        # If enabled, the CHAP secret must be provided in the credentials secret
        # and set to the key "chapsecret"
        # Allowed values:
        #   "true"  - CHAP is enabled
        #   "false" - CHAP is disabled
        # Default value: "false"
        - name: "X_CSI_POWERMAX_ISCSI_ENABLE_CHAP"
          value: "false"
        # X_CSI_TOPOLOGY_CONTROL_ENABLED provides a way to filter topology keys on a node based on array and transport protocol
        # if enabled, user can create custom topology keys by editing node-topology-config configmap.
        # Allowed values:
        #   true: enable the filtration based on config map
        #   false: disable the filtration based on config map
        # Default value: false
        - name: X_CSI_TOPOLOGY_CONTROL_ENABLED
          value: "false"
      # nodeSelector: Define node selection constraints for node pods.
      # For the pod to be eligible to run on a node, the node must have each
      # of the indicated key-value pairs as labels.
      # Leave as blank to consider all nodes
      # Allowed values: map of key-value pairs
      # Default value: None
      nodeSelector:
      # Uncomment if nodes you wish to use have the node-role.kubernetes.io/control-plane taint
      #  node-role.kubernetes.io/control-plane: ""

      # tolerations: Define tolerations that would be applied to node daemonset
      # Add/Remove tolerations as per requirement
      # Leave as blank if you wish to not apply any tolerations
      # Allowed values: map of key-value pairs
      # Default value: None
      tolerations:
        - key: "node.kubernetes.io/memory-pressure"
          operator: "Exists"
          effect: "NoExecute"
        - key: "node.kubernetes.io/disk-pressure"
          operator: "Exists"
          effect: "NoExecute"
        - key: "node.kubernetes.io/network-unavailable"
          operator: "Exists"
          effect: "NoExecute"
