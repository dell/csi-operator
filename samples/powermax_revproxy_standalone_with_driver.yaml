# This sample has been provided to show how to install CSI PowerMax driver with
# CSI PowerMax ReverseProxy in the standalone mode which provides
# the ability to connect to multiple Unisphere servers to managed multiple PowerMax arrays
apiVersion: storage.dell.com/v1
kind: CSIPowerMaxRevProxy
metadata:
  name: powermax-reverseproxy
  namespace: test-powermax
spec:
  # image: Define the container images used for the reverse proxy
  # Default value: None
  # Example: "csipowermax-reverseproxy:v2.5.0"
  image: dellemc/csipowermax-reverseproxy:v2.5.0
  # imagePullPolicy: Policy to determine if the image should be pulled prior to starting the container.
  # Allowed values:
  #  Always: Always pull the image.
  #  IfNotPresent: Only pull the image if it does not already exist on the node.
  #  Never: Never pull the image.
  # Default value: None
  imagePullPolicy: IfNotPresent
  # "tlsSecret" defines the TLS secret that is created with certificate
  # and its associated key
  # Default value: None
  # Example: "csirevproxy-tls-secret"
  tlsSecret: csirevproxy-tls-secret
  config:
    # Mode for the proxy - "StandAlone"
    mode: StandAlone
    standAloneConfig:
      storageArrays:
        - storageArrayId: "000000000001"
          # Unisphere server managing the PowerMax array
          primaryURL: https://unisphere-1-addr:8443
          # proxyCredentialSecrets are used by the clients of the proxy to connect to it
          # If using proxy in the stand alone mode, then the driver must be provided the
          # same secret.
          # The format of the proxy credential secret are exactly the same as the unisphere credential secret
          # For using the proxy with the driver, use the same proxy credential secrets for
          # all the managed storage arrays
          proxyCredentialSecrets:
            - proxy-creds
        - storageArrayId: "000000000002"
          primaryURL: https://unisphere-2-addr:8443
          # An optional backup Unisphere server managing the same array
          # This can be used by the proxy to fall back to in case the primary
          # Unisphere is inaccessible temporarily
          backupURL: unisphere-3-addr:8443
          proxyCredentialSecrets:
            - proxy-creds
      managementServers:
        - url: https://unisphere-1-addr:8443
          # Secret containing the credentials of the Unisphere server
          arrayCredentialSecret: unsiphere-1-creds
          skipCertificateValidation: true
        - url: https://unisphere-2-addr:8443
          arrayCredentialSecret: unsiphere-2-creds
          skipCertificateValidation: true
        - url: https://unisphere-3-addr:8443
          arrayCredentialSecret: unsiphere-3-creds
          skipCertificateValidation: true

---
# This driver manifest is configured with the same set of arrays as the reverseproxy above
apiVersion: storage.dell.com/v1
kind: CSIPowerMax
metadata:
  name: test-powermax
  namespace: test-powermax
spec:
  driver:
    # Config version for CSI PowerMax v2.6.0 driver
    configVersion: v2.6.0
    # replica: Define the number of PowerMax controller nodes
    # to deploy to the Kubernetes release
    # Allowed values: n, where n > 0
    # Default value: None
    replicas: 2
    dnsPolicy: ClusterFirstWithHostNet
    forceUpdate: false
    fsGroupPolicy: ReadWriteOnceWithFSType
    common:
      # Image for CSI PowerMax driver v2.6.0
      image: dellemc/csi-powermax:v2.6.0
      # imagePullPolicy: Policy to determine if the image should be pulled prior to starting the container.
      # Allowed values:
      #  Always: Always pull the image.
      #  IfNotPresent: Only pull the image if it does not already exist on the node.
      #  Never: Never pull the image.
      # Default value: None
      imagePullPolicy: IfNotPresent
      envs:
        # X_CSI_MANAGED_ARRAYS: Serial ID of the arrays that will be used for provisioning
        # Default value: None
        # Examples: "000000000001", "000000000002"
        - name: X_CSI_MANAGED_ARRAYS
          value: "000000000000,000000000001"
          # X_CSI_POWERMAX_ENDPOINT: Address of the Unisphere server that is managing the PowerMax arrays
          # Default value: None
          # Example: https://0.0.0.1:8443
        - name: X_CSI_POWERMAX_ENDPOINT
          value: "https://0.0.0.0:8443/"
          # X_CSI_K8S_CLUSTER_PREFIX: Define a prefix that is appended onto
          # all resources created in the Array
          # This should be unique per K8s/CSI deployment
          # maximum length of this value is 3 characters
          # Default value: None
          # Examples: "XYZ", "EMC"
        - name: X_CSI_K8S_CLUSTER_PREFIX
          value: "XYZ"
          # X_CSI_POWERMAX_PORTGROUPS: Define the set of existing port groups that the driver will use.
          # It is a comma separated list of portgroup names.
          # Required only in case of iSCSI port groups
          # Allowed values: iSCSI Port Group names
          # Default value: None
          # Examples: "pg1", "pg1, pg2"
        - name: X_CSI_POWERMAX_PORTGROUPS
          value: ""
          # "X_CSI_TRANSPORT_PROTOCOL" can be "FC" or "FIBRE" for fibrechannel,
          # "ISCSI" for iSCSI, or "" for autoselection.
          # Allowed values:
          #   "FC"    - Fiber Channel protocol
          #   "FIBER" - Fiber Channel protocol
          #   "ISCSI" - iSCSI protocol
          #   ""      - Automatic selection of transport protocol
          # Default value: "" <empty>
        - name: X_CSI_TRANSPORT_PROTOCOL
          value: ""
        # X_CSI_POWERMAX_PROXY_SERVICE_NAME: Refers to the name of the proxy service in kubernetes
        # Allowed values: "powermax-reverseproxy"
        # default values: "powermax-reverseproxy"
        - name: X_CSI_POWERMAX_PROXY_SERVICE_NAME
          value: "powermax-reverseproxy"
          # X_CSI_GRPC_MAX_THREADS: Defines the maximum number of concurrent grpc requests.
          # Set this value to a higher number (max 50) if you are using the proxy
          # Allowed values: n, where n > 4
          # default values: None
        - name: X_CSI_GRPC_MAX_THREADS
          value: "4"
        # VMware/vSphere virtualization support
        # set X_CSI_VSPHERE_ENABLED to true, if you to enable VMware virtualized environment support via RDM
        # Allowed values:
        #   "true" - vSphere volumes are enabled
        #   "false" - vSphere volumes are disabled
        # Default value: "false"
        - name: "X_CSI_VSPHERE_ENABLED"
          value: "false"
        # X_CSI_VSPHERE_PORTGROUP: An existing portGroup that driver will use for vSphere
        # recommended format: csi-x-VC-PG, x can be anything of user choice
        # Allowed value: valid existing port group on the array
        # Default value: "" <empty>
        - name: "X_CSI_VSPHERE_PORTGROUP"
          value: ""
        # X_CSI_VSPHERE_HOSTNAME: An existing host (initiator group) that driver will use for vSphere
        # this host should contain initiators from all the ESXs/ESXi host where the cluster is deployed
        # recommended format: csi-x-VC-HN, x can be anything of user choice
        # Allowed value: valid existing port group on the array
        # Default value: "" <empty>
        - name: "X_CSI_VSPHERE_HOSTNAME"
          value: ""
        # X_CSI_VCENTER_HOST: URL/endpoint of the vCenter where all the ESX are present
        # Allowed value: valid vCenter host endpoint
        # Default value: "" <empty>
        - name: "X_CSI_VCENTER_HOST"
          value: ""
    controller:
      envs:
        # X_CSI_HEALTH_MONITOR_ENABLED: Enable/Disable health monitor of CSI volumes from node plugin- volume usage, volume condition
        # Allowed values:
        #   true: enable checking of health condition of CSI volumes
        #   false: disable checking of health condition of CSI volumes
        # Default value: false
        - name: X_CSI_HEALTH_MONITOR_ENABLED
          value: "false"
    node:
      envs:
        # X_CSI_POWERMAX_ISCSI_ENABLE_CHAP: Determine if the driver is going to configure
        # ISCSI node databases on the nodes with the CHAP credentials
        # If enabled, the CHAP secret must be provided in the credentials secret
        # and set to the key "chapsecret"
        # Allowed values:
        #   "true"  - CHAP is enabled
        #   "false" - CHAP is disabled
        # Default value: "false"
        - name: X_CSI_POWERMAX_ISCSI_ENABLE_CHAP
          value: "false"
        # X_CSI_HEALTH_MONITOR_ENABLED: Enable/Disable health monitor of CSI volumes from node plugin- volume usage, volume condition
        # Allowed values:
        #   true: enable checking of health condition of CSI volumes
        #   false: disable checking of health condition of CSI volumes
        # Default value: false
        - name: X_CSI_HEALTH_MONITOR_ENABLED
          value: "false"
        # X_CSI_TOPOLOGY_CONTROL_ENABLED provides a way to filter topology keys on a node based on array and transport protocol
        # if enabled, user can create custom topology keys by editing node-topology-config configmap.
        # Allowed values:
        #   true: enable the filtration based on config map
        #   false: disable the filtration based on config map
        # Default value: false
        - name: X_CSI_TOPOLOGY_CONTROL_ENABLED
          value: "false"

    sideCars:
      # Uncomment the following to install 'external-health-monitor' sidecar to enable health monitor of CSI volumes from Controller plugin.
      # Also set the env variable controller.envs.X_CSI_HEALTH_MONITOR_ENABLED to "true" for controller plugin.
      # Also set the env variable node.envs.X_CSI_HEALTH_MONITOR_ENABLED to "true" for node plugin.
      #- name: external-health-monitor
      #  args: ["--monitor-interval=300s"]
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: powermax-config-params
  namespace: test-powermax
data:
  driver-config-params.yaml: |
    CSI_LOG_LEVEL: "debug"
    CSI_LOG_FORMAT: "JSON"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-topology-config
  namespace: test-powermax
data:
  topologyConfig.yaml: |
    # allowedConnections contains a list of (node, array and protocol) info for user allowed configuration
    # For any given storage array ID and protocol on a Node, topology keys will be created for just those pair and
    # every other configuration is ignored
    # Please refer to the doc website about a detailed explanation of each configuration parameter
    # and the various possible inputs
    allowedConnections:
      # nodeName: Name of the node on which user wants to apply given rules
      # Allowed values:
      # nodeName - name of a specific node
      # * -  all the nodes
      # Examples: "node1", "*"
      - nodeName: "node1"
        # rules is a list of 'StorageArrayID:TransportProtocol' pair. ':' is required between both value
        # Allowed values:
        # StorageArrayID:
        #   - SymmetrixID : for specific storage array
        #   - "*" :- for all the arrays connected to the node
        # TransportProtocol:
        #   - FC : Fibre Channel protocol
        #   - ISCSI : iSCSI protocol
        #   - "*" - for all the possible Transport Protocol
        # Examples: "000000000001:FC", "000000000002:*", "*:FC", "*:*"
        rules:
          - "000000000001:FC"
          - "000000000002:FC"
      - nodeName: "*"
        rules:
          - "000000000002:FC"
    # deniedConnections contains a list of (node, array and protocol) info for denied configurations by user
    # For any given storage array ID and protocol on a Node, topology keys will be created for every other configuration but
    # not these input pairs
    deniedConnections:
      - nodeName: "node2"
        rules:
          - "000000000002:*"
      - nodeName: "node3"
        rules:
          - "*:*"
---
apiVersion: v1
kind: Secret
metadata:
  name: vcenter-creds
  # Set driver namespace
  namespace: test-powermax
type: Opaque
data:
  # set username to the base64 encoded username
  username: YWRtaW4=
  # set password to the base64 encoded password
  password: YWRtaW4=
